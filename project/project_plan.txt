

0.ROUGH OUTLINE PLAN

OVERALL OUTLINE PLAN
-1.Plan - high-level outline, brainstorming, and rough then detailed plan and timings
-2.Scope - UX (personas, user needs, user journeys) plus must/should/could/would(but not this time)
-3.Design - product - objects, tables, files, properties, methods, wireframe frontend
-4.Develop - db, objects, sinatra, html/css
-5.Test - TDD, try to break!
-6.Present - generate and prepare - develop during process
-7.PDA - gather evidence - develop during

ROUGH EXPECTED INITIAL TIMINGS
DONE-Aim to get working MVP up and running asap
DONE-THU - plan / scope / design / initial develop
DONE-FRI - plan / scope / design / initial develop
-SAT - plan / initial present and PDA, develop
-SUN - scope / present / develop
-MON - finish scope / design and develop
-TUE - develop
-WED - develop
-THU - final develop and complete presentation
-FRI - present


1.PLAN

TO DO
DONE-rough outline and timing
DONE-create git/github repo
DONE-complete homework form to submit link to repo
DONE-generate more detailed plan for each high level area
DONE-set up project management file - might just do in this file
DONE-consider presentation - prezzi - mac keynote
DONE-consider trello - moscow board? - must/should/could/would(but not this time)
DONE-consider trello - kanban board? - micro task management (to do, done etc)
TODO-look at trello separately fof future if time - happy with current approach for now

GOALS
DONE-get rough and then detailed plan
TODO-consider all the possibilities for app
DONE-aim to get prototype-MVP up and running asap
DONE-aim to do presentation and PDA during process


2.SCOPE

TO DO
-more detailed scoping - review apps
-personas in presentation
-user needs in presentation
-user journeys in presentation
-consider what other activity might be required
-split design goals by MVP/extensions/etc - must/should/could/would(but not this time)

GOALS
-consider requirements and potential requirements
-detailed personas, user needs, user journeys
-try to do directly in presentation??
DONE-cover MVP
-cover Extensions
-consider further capability - review apps - Monzo, MoneyDashboard, lots of mobile/online banking apps
-identify must/should/could/not this time

PERSONAS
1.spending limit
2.spending goal
3.be in control - more information
-student needs to save, richer saving for something, XYZ something els
uses phone - mobile first
no controls on spending
student - spending limited
office worker - saving for something
versus income - need to be able to add positive amounts!!
repeat transactions??

USER NEEDS
-set limit
-set goal
-view details

USER JOURNEYS
-as a:
-i want to be able to:
-so that I can:


3.DESIGN

TO DO
DONE-folder/file structure
-object diagrams
-table diagrams
-view wireframes??
-try to diagram directly in presentation??
-review folder/file structure for other objects

FOLDER/FILE STRUCTURE
DONE-controllers
DONE-controller.rb (main contoller at top level for now)
DONE-db
DONE---seeds.rb
DONE---sql_runner.rb
DONE---spending_tracker.sql
DONE-models
DONE---merchant
DONE---tag
DONE---transaction
DONE-public
DONE---style.css - may change later
DONE-specs
DONE-views
DONE---layout.erb
DONE---index.erb
DONE---index/new/show/edit for each other view

OBJECTS

-MERCHANT OBJECT (MVP)
Properties
DONE---id
DONE---name
Methods
DONE---initialize
DONE---reader(name,id)
DONE---CRUD (save, update, delete, self.all, self.delete_all, self.find(id))
---get transactions/tags???
---self.delete(id)???

-TAG OBJECT (MVP)
Properties
DONE---id
DONE---name
Methods
DONE---initialize
DONE---reader(name,id)
DONE---CRUD (save, update, delete, self.all, self.delete_all, self.find(id))
---get transactions/merchants???
---self.delete(id)???

-TRANSACTION OBJECT (MVP)
Properties
DONE---id
DONE---amount
TODO---date
DONE---merchant_id
DONE---tag_id
Methods
DONE---initialize
DONE---reader(id,amount,merchant_id,tag_id) - EXPOSE ALL FOR NOW
DONE---CRUD (save, update, delete, self.all, self.delete_all, self.find(id))
DONE---tags
DONE---merchants
DONE---total
---self.delete(id)???


SQL/TABLES

DONE-merchants table (MVP)
DONE---id
DONE---name

DONE-tags table (MVP)
DONE---id
DONE---name

DONE-transactions table (MVP)
DONE---id
DONE---amount
TODO___name
TODO---date
DONE---merchant_id
DONE---tag_id


VIEWS/DISPLAYS
DONE-All transactions - amount, merchant, tag
DONE-overall total (MVP)
DONE-simple layout
DONE-simple home
DONE-REST views for each model - index/new/show/edit


4.DEVELOP

TO DO
DONE-set up folder/file structure
DONE-createdb spending_tracker
DONE-psql -d spending_tracker -f db/spending_tracker.sql
DONE-db sql-tables, runner for queries
DONE-amount to numeric
DONE-objects/models
DONE-seed file for testing
DONE-public/css/images
DONE-simple layout view
DONE-index - transactions view
DONE-transactions_controller
DONE-other controllers - app, tags, merchant
DONE-basic CRUD views - index, new, show, edit
DONE-additional methods required beyond CRUD - tags, merchants for transaction
TODO-add date to transaction
-specs for testing
-review ALL re further extensions

GOALS
DONE-set up MVP asap
-identify and iteratively add functionality / styling


5.TEST

GOALS
-do TDD where feasible
-try to break anything I build!


6.PRESENT

TO DO
DONE-rough outline presentation - see below
DONE-choose (mac?) and set up presentation file
-try to do UX directly in presentation

GOALS
-Presentations Friday - 10 minutes to present + 5 minutes for questions
-Show your sketches, notes, diagrams, wireframes and user planning
-Demonstrate your app's functionality
-Talk about some code that you are particularly proud of
-Highlight your main learning points
-Do not talk through every single line of code or go over the time limit

OUTLINE PRESENTATION
DONE-Plan
DONE-Scope - UX
DONE-Design - objects/models/views etc
DONE-Demonstrate app
DONE-Code highlights
DONE-Learning points


7.PDA REQUIREMENTS

TO DO
DONE-check requirements

REQUIREMENTS FOR PDA - WEEK 5 AND 6
-A Use Case Diagram
-A Class Diagram
-An Object Diagram
-An Activity Diagram
-Produce an Implementations Constraints plan detailing the following factors:
---Hardware and software platforms
---Performance requirements
---Persistent storage and transactions
---Usability
---Budgets
---Time
-User Site Map
-2 Wireframe Diagrams
-Example of Pseudocode used for a method
-Show user input being processed according to design requirements. Take a screenshot of:
---The user inputting something into your program
---The user input being saved or used in some way
-Show an interaction with data persistence. Take a screenshot of:
---Data being inputted into your program
---Confirmation of the data being saved
-Show the correct output of results and feedback to user. Take a screenshot of:
---The user requesting information or an action to be performed
---The user request being processed correctly and demonstrated in the program
-Take a screenshot of one of your projects where you have worked alone and attach the Github link.
-Take screenshots or photos of your planning and the different stages of development to show changes.

PDF with examples is in here:
https://github.com/codeclan/pda/blob/master/PDA%20Lessons/Lesson%201%20-%20Planning%20Lesson%20(updated).pdf
